;; By default the warp-gate is hard coded to have 4 entries, this changes it to use the length of *warp-info*
;; This way if you add continue points to warp-info they are automatically added to the list.

(defstate idle (warp-gate)
  :virtual #t
  :event (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
    (case arg2
      (('hide)
       (go-virtual hidden)
       )
      )
    )
  :code (behavior ()
    (remove-setting! 'allow-progress)
    (set! (-> self state-time) (-> *display* base-frame-counter))
    (loop
      (when (and (and *target* (>= 20480.0 (vector-vector-distance (-> self root trans) (-> *target* control trans))))
                 (and (>= (-> self level-slot) 0)
                      (not (movie?))
                      (not (level-hint-displayed?))
                      (zero? (logand (-> *target* control root-prim prim-core action) (collide-action ca-7 ca-8 ca-9 ca-12 ca-13 ca-14))
                             )
                      (let* ((v1-16 (-> self root))
                             (a1-2 (-> *target* control trans))
                             (f0-1 (vector-y-angle (vector-! (new 'stack-no-clear 'vector) a1-2 (-> v1-16 trans))))
                             )
                        (or (!= (-> self level-slot) 3) (and (< f0-1 -9102.223) (< -32768.0 f0-1)))
                        )
                      )
                 )
        (hide-hud)
        (level-hint-surpress!)
        (kill-current-level-hint '() '(sidekick voicebox) 'exit)
        (when (and (hud-hidden?)
                   (can-grab-display? self)
                   (cond
                     ((or (= (-> *target* next-state name) 'target-warp-in) (= (-> *target* next-state name) 'target-warp-out))
                      (set! (-> self state-time) (-> *display* base-frame-counter))
                      #f
                      )
                     (else
                       #t
                       )
                     )
                   (>= (- (-> *display* base-frame-counter) (-> self state-time)) (seconds 0.1))
                   )
          (if (and (cpad-pressed? 0 circle) (process-grab? *target*))
              (go-virtual active)
              )
          (if (and *cheat-mode* (cpad-pressed? 0 l3))
            ;;(set! (-> self max-slot) 4)
              (set! (-> self max-slot) (- (-> *warp-info* length) 1))
              )
          (let ((gp-0
                  (new 'stack 'font-context *font-default-matrix* 32 160 0.0 (font-color default) (font-flags shadow kerning))
                  )
                )
            (let ((v1-53 gp-0))
              (set! (-> v1-53 width) (the float 440))
              )
            (let ((v1-54 gp-0))
              (set! (-> v1-54 height) (the float 80))
              )
            (let ((v1-55 gp-0))
              (set! (-> v1-55 scale) 0.9)
              )
            (set! (-> gp-0 flags) (font-flags shadow kerning large))
            (print-game-text (lookup-text! *common-text* (game-text-id press-to-use) #f) gp-0 #f 128 22)
            )
          )
        )
      (suspend)
      )
    (none)
    )
  )

  
(define WarpLevelString "Placeholder for upcase method")

;;Return #t if the first entries in *warp-info* are in the expected state
(defun vanilla-warp-info? ()
(if (not (string= (-> *warp-info* 0) "training-warp"))
    (return #f)
)

(if (not (string= (-> *warp-info* 1) "village1-warp"))
    (return #f)
)

(if (not (string= (-> *warp-info* 2) "village2-warp"))
    (return #f)
)

(if (not (string= (-> *warp-info* 3) "village3-warp"))
    (return #f)
)

(if (not (string= (-> *warp-info* 4) "citadel-warp"))
    (return #f)
)
    #t
)

(defun print-level-name ((arg0 int) (arg1 font-context) (arg2 int) (arg3 int))
  (let ((s5-0 (if arg3
                  arg2
                  (- arg2)
                  )
              )
        )
    (+! (-> arg1 origin x) (the float s5-0))
    (let ((f30-0 (- 1.0 (* 0.0033333334 (the float arg2)))))
    ;;if not <4  and in the vanilla level order (Default levels do this!)
    (if (and (vanilla-warp-info?) (< arg0 5) )
    (begin
        (print-game-text-scaled
        (lookup-text! *common-text* (the-as game-text-id (+ arg0 286)) #f)
        f30-0
        arg1
        (the int (* 128.0 f30-0)))
        )    
    ;;if <4 (Its a custom level! sick lets see if it has a customname)
    (begin
    (if  (!= (-> (lookup-level-info (-> (get-continue-by-name *game-info* (-> *warp-info* (- arg0 0))) level)) customname) 0)
    ;;It has a custom name cool! lets use that as the text in the warp menu!
    (begin
        (string-upcase  (-> (lookup-level-info (-> (get-continue-by-name *game-info* (-> *warp-info* (- arg0 0))) level)) customname) (the-as string WarpLevelString))
        (print-game-text-scaled
        WarpLevelString
        f30-0
        arg1
        (the int (* 128.0 f30-0))))
        )
    ;;It doesnt have a custom name :( lets default to the level code name VILLAGE1 ETC)
    (if  (= (-> (lookup-level-info (-> (get-continue-by-name *game-info* (-> *warp-info* (- arg0 0))) level)) customname) 0)
    (begin
        (string-upcase  (symbol->string (-> (lookup-level-info (-> (get-continue-by-name *game-info* (-> *warp-info* (- arg0 0))) level)) name)) (the-as string WarpLevelString))
        (print-game-text-scaled
        WarpLevelString
        f30-0
        arg1
        (the int (* 128.0 f30-0))))))
        )

        (if (not (vanilla-warp-info?))
    
    ;;if <4 and the first entries are not in the default expeceted order (Its a custom level! sick lets see if it has a customname)
    (begin
    (if  (!= (-> (lookup-level-info (-> (get-continue-by-name *game-info* (-> *warp-info* (- arg0 0))) level)) customname) 0)
    ;;It has a custom name cool! lets use that as the text in the warp menu!
    (begin
        (string-upcase  (-> (lookup-level-info (-> (get-continue-by-name *game-info* (-> *warp-info* (- arg0 0))) level)) customname) (the-as string WarpLevelString))
        (print-game-text-scaled
        WarpLevelString
        f30-0
        arg1
        (the int (* 128.0 f30-0))))
        )
    ;;It doesnt have a custom name :( lets default to the level code name VILLAGE1 ETC)
    (if  (= (-> (lookup-level-info (-> (get-continue-by-name *game-info* (-> *warp-info* (- arg0 0))) level)) customname) 0)
    (begin
        (string-upcase  (symbol->string (-> (lookup-level-info (-> (get-continue-by-name *game-info* (-> *warp-info* (- arg0 0))) level)) name)) (the-as string WarpLevelString))
        (print-game-text-scaled
        WarpLevelString
        f30-0
        arg1
        (the int (* 128.0 f30-0))))))
        )
    (set! (-> arg1 origin x) (- (-> arg1 origin x) (the float s5-0)))
    )
  (set! (-> arg1 color) (font-color default))
  arg1
  )
)